import Head from 'next/head'
import Image from 'next/image'
import { useEffect, useState } from 'react'
import styles from '../styles/Home.module.css'

export default function Home() {
  const [selCnt, setSelCnt] = useState(0);
  const [maxSel, setMaxSel] = useState(10);
  const [rowCnt, setRowCnt] = useState(20);
  const [cellProps, setCellProps] = useState([]);
  const [columnCnt, setColumnCnt] = useState(30);

  useEffect(() => {
    for (let i = 0; i < rowCnt * columnCnt; i++) {
      cellProps[i] = '';
    }

    for (let i = 0; i < 50; i++) {
      cellProps[parseInt(Math.random() * 600)] = 'disable';
    }
    cellClickUp()
    console.log('here')
  }, []);

  const mouseOver = (e, selInd) => { 
    if (cellProps[selInd] != "disable" && e.buttons === 1 && selCnt < maxSel) { 
      const selLen = cellProps[selInd].length > 0;
      cellProps[selInd] = selLen ? '' : 'selected';
      setCellProps(cellProps); 
      
      setSelCnt(selLen ? selCnt - 1 : selCnt + 1);
    }
  }

  const cellClickUp = () => {
    setCellProps(cellProps);
  }

  const cellClick = (selInd) => {
    if (cellProps[selInd] != "disable") {
      if (cellProps[selInd] == '') {
        if (selCnt < maxSel) {
          setSelCnt(selCnt + 1);
          cellProps[selInd] = 'selected';
          setCellProps(cellProps);
        } else {
          alert('over max sel');
        }
      } else {
        setSelCnt(selCnt - 1);
        cellProps[selInd] = '';
        setCellProps(cellProps);
      }
    }
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <b>You selected {selCnt} fractions</b>
        <div className={styles.grid}>
          <Image src="/img.jpg" alt="hig res img" width={800} height={500} />
          <table className={styles.imgtbl}>
            <tbody>
              {[...Array(rowCnt)].map((x, i) => {
                return (
                  <tr key={i}>
                    {[...Array(columnCnt)].map((x1, i1) =>
                      <td key={i1} onMouseDown={() => cellClick(i * columnCnt + i1)}
                        onMouseUp={() => cellClickUp()}
                        onMouseOver={e => mouseOver(e, i * columnCnt + i1)}
                        className={styles[cellProps[i * columnCnt + i1]]} />
                    )}
                  </tr>
                )
              })}
            </tbody>
          </table>
        </div>
      </main>
    </div>
  )
}
